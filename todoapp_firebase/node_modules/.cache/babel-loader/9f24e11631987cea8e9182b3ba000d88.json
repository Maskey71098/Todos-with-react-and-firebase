{"ast":null,"code":"import _slicedToArray from\"C:/Users/Dell/todoapp_firebase/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';import'./App.css';import{Button,FormControl,Input,InputLabel}from'@material-ui/core';import Todo from'./Todo';import db from'./firebase';import firebase from'firebase';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){//State for todos, which we later map to list it out\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),todos=_useState2[0],setTodos=_useState2[1];//State for input\nvar _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),input=_useState4[0],setInput=_useState4[1];console.log(input);//when the app loads, we need to listen to the database and fetch new todos as they get added amd removed\n//for this we use a hook called useEffect\nuseEffect(function(){//this code fires up when app.js loads\ndb.collection('todos').orderBy('timestamp','desc').onSnapshot(function(snapshot){setTodos(snapshot.docs.map(function(doc){return doc.data().todo;}));});},[]);var addTodo=function addTodo(event){//this will trigger the add todo button\nevent.preventDefault();//prevents refreshing page when submit\ndb.collection('todos').add({todo:input,timestamp:firebase.firestore.FieldValue.serverTimestamp()});console.log('im working');setInput('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Hello World!\"}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(FormControl,{children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Write a Todo\"}),/*#__PURE__*/_jsx(Input,{value:input,onChange:function onChange(event){return setInput(event.target.value);}})]}),/*#__PURE__*/_jsx(Button,{disabled:!input,type:\"submit\",onClick:addTodo,Button:true,variant:\"contained\",color:\"primary\",children:\"Add Todo\"})]}),/*#__PURE__*/_jsx(\"ul\",{children:todos.map(function(todo){return/*#__PURE__*/_jsx(Todo,{todo:todo});})})]});}export default App;","map":{"version":3,"sources":["C:/Users/Dell/todoapp_firebase/src/App.js"],"names":["useState","useEffect","Button","FormControl","Input","InputLabel","Todo","db","firebase","App","todos","setTodos","input","setInput","console","log","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","addTodo","event","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","target","value"],"mappings":"qJAAA,OAAQA,QAAR,CAAkBC,SAAlB,KAAkC,OAAlC,CACA,MAAO,WAAP,CACA,OAAQC,MAAR,CAAgBC,WAAhB,CAA6BC,KAA7B,CAAoCC,UAApC,KAAqD,mBAArD,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,EAAP,KAAe,YAAf,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb;AACA,cAA0BT,QAAQ,CAAC,EAAD,CAAlC,wCAAOU,KAAP,eAAcC,QAAd,eAEA;AACA,eAA0BX,QAAQ,CAAC,EAAD,CAAlC,yCAAOY,KAAP,eAAcC,QAAd,eACAC,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAEA;AACA;AAEAX,SAAS,CAAC,UAAM,CACd;AACAM,EAAE,CAACS,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B,WAA/B,CAA2C,MAA3C,EAAmDC,UAAnD,CAA8D,SAAAC,QAAQ,CAAI,CACxER,QAAQ,CAACQ,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,GAAWC,IAAf,EAArB,CAAD,CAAR,CACD,CAFD,EAID,CANQ,CAMN,EANM,CAAT,CAQA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACzB;AAEAA,KAAK,CAACC,cAAN,GAAwB;AACxBpB,EAAE,CAACS,UAAH,CAAc,OAAd,EAAuBY,GAAvB,CAA2B,CACzBJ,IAAI,CAAEZ,KADmB,CAEzBiB,SAAS,CAAErB,QAAQ,CAACsB,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAFc,CAA3B,EAIAlB,OAAO,CAACC,GAAR,CAAY,YAAZ,EACAF,QAAQ,CAAC,EAAD,CAAR,CAED,CAXD,CAYA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACA,oCADA,cAEA,qCACE,MAAC,WAAD,yBACE,KAAC,UAAD,2BADF,cAEE,KAAC,KAAD,EAAO,KAAK,CAAED,KAAd,CAAqB,QAAQ,CAAE,kBAAAc,KAAK,QAAIb,CAAAA,QAAQ,CAACa,KAAK,CAACO,MAAN,CAAaC,KAAd,CAAZ,EAApC,EAFF,GADF,cAME,KAAC,MAAD,EAAQ,QAAQ,CAAE,CAACtB,KAAnB,CAA0B,IAAI,CAAC,QAA/B,CAAwC,OAAO,CAAEa,OAAjD,CAA0D,MAAM,KAAhE,CAAiE,OAAO,CAAC,WAAzE,CAAqF,KAAK,CAAC,SAA3F,sBANF,GAFA,cAcA,oBACGf,KAAK,CAACW,GAAN,CAAU,SAAAG,IAAI,qBACb,KAAC,IAAD,EAAM,IAAI,CAAEA,IAAZ,EADa,EAAd,CADH,EAdA,GADF,CAsBD,CAED,cAAef,CAAAA,GAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport './App.css';\nimport {Button, FormControl, Input, InputLabel} from '@material-ui/core';\nimport Todo from './Todo';\nimport db from './firebase';\nimport firebase from 'firebase'\n\nfunction App() {\n  //State for todos, which we later map to list it out\n  const [todos, setTodos] = useState([]); \n\n  //State for input\n  const [input, setInput] = useState('');\n  console.log(input);\n\n  //when the app loads, we need to listen to the database and fetch new todos as they get added amd removed\n  //for this we use a hook called useEffect\n\n  useEffect(() => {\n    //this code fires up when app.js loads\n    db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => doc.data().todo));\n    })\n    \n  }, []);\n\n  const addTodo = (event) => {\n    //this will trigger the add todo button\n\n    event.preventDefault(); //prevents refreshing page when submit\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    console.log('im working');\n    setInput('');\n\n  }\n  return (\n    <div className=\"App\">\n    <h1>Hello World!</h1>\n    <form>\n      <FormControl>\n        <InputLabel>Write a Todo</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n      </FormControl>\n\n      <Button disabled={!input} type=\"submit\" onClick={addTodo} Button variant=\"contained\" color=\"primary\">\n          Add Todo\n      </Button>\n    </form>\n    \n\n    <ul>\n      {todos.map(todo => (\n        <Todo todo={todo} />\n      ))}\n    </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}