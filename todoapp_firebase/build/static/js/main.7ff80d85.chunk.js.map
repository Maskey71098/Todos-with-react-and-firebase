{"version":3,"sources":["firebase.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","React","useState","modalStyle","open","setOpen","input","setInput","Modal","onClose","e","style","className","placeholder","todo","value","onChange","event","target","onClick","collection","doc","id","set","merge","ListItem","ListItemAvatar","ListItemText","primary","secondary","variant","color","delete","App","todos","setTodos","console","log","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","Button","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ff80d85.chunk.js","sourcesContent":["\r\n  import firebase from \"firebase\";\r\n\r\n  const firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAser42jaNVpwv8vCtdOKMV9Dy8Ac4emoQ\",\r\n    authDomain: \"todo-app-cp-b726f.firebaseapp.com\",\r\n    projectId: \"todo-app-cp-b726f\",\r\n    storageBucket: \"todo-app-cp-b726f.appspot.com\",\r\n    messagingSenderId: \"38652377537\",\r\n    appId: \"1:38652377537:web:1cf63ff260e5238f2d1740\",\r\n    measurementId: \"G-HC2VNMB716\"\r\n  });\r\n\r\n  const db = firebaseApp.firestore();\r\n  export default db;","import React from 'react'\r\nimport {list, ListItem, ListItemAvatar, Avatar, ListItemText, Button, Modal} from '@material-ui/core';\r\nimport db from './firebase';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {useState} from 'react'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n  }\r\n  \r\n  function getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n  }\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nfunction Todo(props) {\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n    const [input, setInput] = useState();\r\n    const handleOpen = () => {\r\n        setOpen=(true);\r\n    };\r\n\r\n    const updateTodo = () => {\r\n        // update the todo with the new input text \r\n        db.collection('todos').doc(props.todo.id).set({\r\n            todo: input,\r\n        }, {merge: true}) // basically appends\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Modal\r\n        open={open}\r\n        onClose={e => setOpen(false)}\r\n        >\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <h1>Edit your todo!</h1>\r\n            <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)} />\r\n            <button onClick={updateTodo}>Edit Todo</button>\r\n        </div>\r\n        </Modal>\r\n        <list>\r\n            <ListItem> \r\n                <ListItemAvatar>\r\n                </ListItemAvatar>\r\n                    <ListItemText primary={props.todo.todo} secondary=\"Dummy deadline\">\r\n                    </ListItemText>\r\n                    <EditIcon variant=\"contained\" color=\"primary\" onClick={e => setOpen(true)}>Edit</EditIcon>\r\n                    <DeleteIcon variant=\"contained\" color=\"secondary\" onClick={event => db.collection('todos').doc(props.todo.id).delete()}>DELETE</DeleteIcon>\r\n\r\n            </ListItem>\r\n        </list>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import {useState, useEffect} from 'react';\nimport './App.css';\nimport {Button, FormControl, Input, InputLabel} from '@material-ui/core';\nimport Todo from './Todo';\nimport db from './firebase';\nimport firebase from 'firebase'\n\nfunction App() {\n  //State for todos, which we later map to list it out\n  const [todos, setTodos] = useState([]); \n\n  //State for input\n  const [input, setInput] = useState('');\n  console.log(input);\n\n  //when the app loads, we need to listen to the database and fetch new todos as they get added amd removed\n  //for this we use a hook called useEffect\n\n  useEffect(() => {\n    //this code fires up when app.js loads\n    db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo})));\n    })\n    \n  }, []);\n\n  const addTodo = (event) => {\n    //this will trigger the add todo button\n\n    event.preventDefault(); //prevents refreshing page when submit\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    console.log('im working');\n    setInput('');\n\n  }\n  return (\n    <div className=\"App\">\n    <h1>A fully functional TODO App!</h1>\n    <form>\n      <FormControl>\n        <InputLabel>Write a Todo</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n      </FormControl>\n\n      <Button disabled={!input} type=\"submit\" onClick={addTodo} Button variant=\"contained\" color=\"primary\">\n          Add Todo\n      </Button>\n    </form>\n    \n\n    <ul>\n      {todos.map(todo => (\n        <Todo todo={todo} />\n      ))}\n    </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}